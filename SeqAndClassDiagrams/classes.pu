@startuml classes
interface IActive {
    tick(dT)
}
class Tecton {
    addNeighbor(Tecton)
    addInsect(Insect)
    addSpore(Spore)
    removeNeighbor(Tecton)
    removeInsect(Insect)
    fillWithStuff(Spore[], Mushroom, Insect[], Tecton[])
    hasMyceliumTo(Tecton) : boolean
    canGrowMyceliumFrom(Fungus) : boolean
    distanceTo(Tecton) : int
    newMe() : Tecton
    growMushroom(Fungus)
    growMycelium(Fungus, Tecton)
}
class Fungus {
    getPotentialMyceliumSources() : Tecton[]
    getTectonsWithMycelia() : Tecton[]
    canGrowMycelium() : boolean
    myceliumGrowthComplete()
    growMushroom(Tecton)
    growMycelium(Tecton, Tecton)
}
class Mycelium {
    Mycelium(Fungus,Tecton,Tecton)
    die()
}
class Mushroom {
    range
    cooldown
    Mushroom(Fungus, Tecton)
    burstSpore(Tecton)
}
class Spore {
    getEffect() : InsectEffect
}
class Insect {
    cooldown
    speed
    antiChewCount
    isParalysed
    score
    eatSpore()
    getPotentialMoveTargets() : Tecton[]
    getPotencialChewTargets() : Mycelium[]
    removeEffect(InsectEffect)
    moveTo(Tecton)
    chewMycelium(Mycelium)
}
abstract InsectEffect {
    timeLeft
    {static} createEffect() : InsectEffect
    {abstract} applyTo(Insect)
    {abstract} remove()
}

IActive ()- Tecton
IActive ()- Mushroom
IActive ()- Mycelium
IActive ()- Insect
IActive ()- InsectEffect

Tecton "*" -- "*" Tecton : neighbors
Tecton "ends 2" -- "mycelia *" Mycelium
Tecton "1" --> "spores *" Spore
Tecton "location 1" -- "mushroom 0..1" Mushroom

Mycelium "mycelia *" -- "species 1" Fungus
Insect "activeEffects *" -- "insect 1" InsectEffect
Insect "insects *" -- "location 1" Tecton
Fungus "species 1" -- "mushrooms *" Mushroom
Spore "*" --> "species 1" Fungus

Fungus ..> Tecton
Spore ..> InsectEffect
Insect ..> Mycelium
Insect ..> Spore
Mushroom ..> Spore

@enduml